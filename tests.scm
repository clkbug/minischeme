(use gauche.test)
(test-start "unit tests")

(load "./main.scm")

(test-section "utils-find")
(define (test-find)
  (define lis '(1 2 3 4 5 6))
  (test "find 1" #f (lambda () (find (lambda (x) (eq? x 10)) lis)))
  (test "find 2" 3 (lambda () (find (lambda (x) (eq? x 3)) lis)))
  (test "find 3" 2 (lambda () (find even? lis)))
  (test "find 1" 1 (lambda () (find odd? lis))))
(test-find)

(test-section "env")
(define (test-env)
  (define e0 (make-env #f))
  (define e1 (make-env e0))
  (test "env 1" #f (lambda () (e0 'find 'a)))
  (e0 'add 'a 1)
  (test "env 2" '(a . 1) (lambda () (e0 'find 'a)))
  (e0 'add 'b 2)
  (test "env 3" '(b . 2) (lambda () (e0 'find 'b)))
  (e1 'add 'a 2)
  (e1 'add 'b 3)
  (test "env 4" '(a . 2) (lambda () (e1 'find 'a)))
  (test "env 5" '(b . 3) (lambda () (e1 'find 'b)))
  (test "env 6" '(a . 1) (lambda () (e0 'find 'a)))
  (e1 'update 'a 3)
  (test "env 7" '(a . 3) (lambda () (e1 'find 'a)))
  (e0 'add 'c 10)
  (test "env 8" '(c . 10) (lambda () (e1 'find 'c)))
  (e1 'update 'c 12)
  (test "env 9" '(c . 12) (lambda () (e1 'find 'c)))
  )
(test-env)

(test-end :exit-on-failure #t)
